# Name
name: 'IgrOS-Kernel CI/CD'

# Triggered on push
on: [push]

# Project jobs
jobs:

  # Build Kernel
  BuildKernel:

    # Name
    name: 'Build with CMake'
    # OS
    runs-on: ubuntu-22.04

    # Environment variables
    env:
      IGROS_KERNEL_DIR_BUILD: "${{ github.workspace }}/build"
      IGROS_KERNEL_DIR_INSTALL: "${{ github.workspace }}/install"
      CCACHE_BASEDIR: "${{ github.workspace }}/ccache"
      CCACHE_DIR: "${{ github.workspace }}/ccache/.ccache"
      CCACHE_COMPRESS: "true"
      CCACHE_COMPRESSLEVEL: "6"
      CCACHE_MAXSIZE: "200M"
      CLICOLOR_FORCE: "1"
      NINJA_STATUS: "[%f/%t %p::%e] "
      SONAR_CLOUD_BUILD_WRAPPER_VERSION: "4.6.2.2472"

    # Strategy with languages matrix
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        arch: [ 'i386', 'x86_64' ]
        compiler: [ 'clang++', 'g++' ]

    # Job steps
    steps:

    # Checkout
    - name: 'Checkout repository'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install dependencies
    - name: 'Install Dependencies'
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y --no-install-recommends ccache cmake doxygen graphviz g++-multilib gcc-multilib ninja-build

    # Install Clang 15.0.0
    - name: 'Install Clang 15.0.0'
      shell: bash
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 15 all
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-15 150
        sudo update-alternatives --install /usr/bin/ld.lld ld.lld /usr/bin/ld.lld-15 150

    # Init CodeQL
    - name: 'CodeQL Init'
      uses: github/codeql-action/init@v2
      with:
        languages: cpp

    # Init SonarCloud Wrapper
    - name: 'SonarCloud Init'
      shell: bash
      run: |
        curl -L -O https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
        unzip -o build-wrapper-linux-x86.zip
        curl -L -O https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_CLOUD_BUILD_WRAPPER_VERSION}-linux.zip
        unzip sonar-scanner-cli-${SONAR_CLOUD_BUILD_WRAPPER_VERSION}-linux.zip

    # Restore Build Cache
    - name: 'Restore Build Cache'
      uses: actions/cache@v3
      with:
        path: ${{ env.IGROS_KERNEL_DIR_BUILD }}
        key: build-${{ matrix.compiler }}-${{ matrix.arch }}-${{ github.sha }}
        restore-keys: |
          build-${{ matrix.compiler }}-${{ matrix.arch }}-

    # Restore CCache Cache
    - name: 'Restore CCache Cache'
      uses: actions/cache@v3
      with:
        path: ${{ env.CCACHE_BASEDIR }}
        key: ccache-${{ matrix.compiler }}-${{ matrix.arch }}-${{ github.sha }}
        restore-keys: |
          ccache-${{ matrix.compiler }}-${{ matrix.arch }}-

    # Configure
    - name: 'CMake Configure'
      shell: bash
      run: |
        cmake --preset="config-linux-${{ matrix.compiler }}-${{ matrix.arch }}-debug"

    # Build
    - name: 'CMake Build'
      shell: bash
      run: |
        build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir build-wrapper cmake --build --preset="build-linux-${{ matrix.compiler }}-${{ matrix.arch }}-debug"

    # Install
    - name: 'CMake Install'
      shell: bash
      run: |
        cmake --build --preset="build-linux-${{ matrix.compiler }}-${{ matrix.arch }}-debug" --target install

    # CodeQL analysis
    - name: 'CodeQL Analysis'
      uses: github/codeql-action/analyze@v2

    # SonarCloud Wrapper analysis
    - name: 'SonarCloud Analysis'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner-${SONAR_CLOUD_BUILD_WRAPPER_VERSION}-linux/bin/sonar-scanner -X -Dproject.settings=sonar-project.properties

